//
// SDR_Cube Band Scope FFT calculations
// OH2NLT / Juha Niinikoski 01.09.2010
//
// MPLAB v8.40, Microchip C30 v3.20
//

// Codec data processing except filter calculations happens here


// Version history


// include files
#include <math.h>
#include <dsp.h>
#include <stdio.h>
#include "sdr-cube.h"							// board & processor specific definitions
#include "uart1.h"								// terminal UART definitions
#include "NUE_PSK_LCD_single_sdr.h"				// Graphic LCD driver
#include "cube_globals.h"

#include "fft.h"								// fft calculation definitions


						// global data





//__________________________________ FFT _____________________________________________

/* Extern definitions */
extern fractcomplex sigCmpx[FFT_BLOCK_LENGTH] 		/* Typically, the input signal to an FFT  */
__attribute__ ((section (".ydata, data, ymemory"), 	/* routine is a complex array containing samples */
aligned (FFT_BLOCK_LENGTH * 2 *2)));      			/* of an input signal. For this example, */
													/* we will provide the input signal in an */													/* array declared in Y-data space. */
/* Global Definitions */
#ifndef FFTTWIDCOEFFS_IN_PROGMEM
fractcomplex twiddleFactors[FFT_BLOCK_LENGTH/2] 	/* Declare Twiddle Factor array in X-space*/
__attribute__ ((section (".xbss, bss, xmemory"), aligned (FFT_BLOCK_LENGTH*2)));
#else
extern const fractcomplex twiddleFactors[FFT_BLOCK_LENGTH/2]	/* Twiddle Factor array in Program memory */
__attribute__ ((space(auto_psv), aligned (FFT_BLOCK_LENGTH*2)));
#endif

int	peakFrequencyBin = 0;							/* Declare post-FFT variables to compute the */
unsigned long peakFrequency = 0;					/* frequency of the largest spectral component */

//__________________________________ FFT _____________________________________________


// Init FFT
void fft_init(void)
	{
#ifndef FFTTWIDCOEFFS_IN_PROGMEM								/* Generate TwiddleFactor Coefficients */
	TwidFactorInit (LOG2_BLOCK_LENGTH, &twiddleFactors[0], 0);	/* We need to do this only once at start-up */
#endif

	}


// calculate bandscope data
void calc_bandscope(void)
	{
	int i;

// get samples
//		start_sampling(7, &sigCmpx[0].real, 128);
//		while(check_adc_buff_full() == 0);				// wait for buffer full


// convert to complex
	fractional *p_real = &sigCmpx[0].real ;
	fractcomplex *p_cmpx = &sigCmpx[0] ;

	for ( i = 0; i < FFT_BLOCK_LENGTH; i++ )	/* The FFT function requires input data */
		{										/* to be in the fractional fixed-point range [-0.5, +0.5]*/
// scale
//		*p_real = *p_real >>1 ;					/* So, we shift all data samples by 1 bit to the right. */
		*p_real = *p_real << 3 ;				/* Scale ADC samples other direction */
		*p_real++;								/* Should you desire to optimize this process, perform */
		}

	p_real = &sigCmpx[(FFT_BLOCK_LENGTH/2)-1].real ;	/* Set up pointers to convert real array */
	p_cmpx = &sigCmpx[FFT_BLOCK_LENGTH-1] ; 			/* to a complex array. The input array initially has all */
														/* the real input samples followed by a series of zeros */

	for ( i = FFT_BLOCK_LENGTH; i > 0; i-- ) 			/* Convert the Real input sample array */
		{												/* to a Complex input sample array  */
		(*p_cmpx).real = (*p_real--);					/* We will simpy zero out the imaginary  */
		(*p_cmpx--).imag = 0x0000;						/* part of each data sample */
		}


	}
